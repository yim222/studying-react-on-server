render() {
    const greeting = {
      subject: 'React',
      description: 'Your component library for ...',
    };

    return (
      <div>
        <Greeting greeting={greeting} />
      </div>
    );
  }
}

const Greeting = ({ greeting }) =>
  <div>
    <Title title={`Welcome to ${greeting.subject}`} />
    <Description description={greeting.description} />
  </div>

const Title = ({ title }) =>
  <h1>{title}</h1>;

const Description = ({ description }) =>
  <p>{description}</p>;


  //passing child to parent :
  constructor(props) {
   super(props);

   this.state = {
     isShow: true,
     x:"sa"
   };

   this.toggleShow = this.toggleShow.bind(this);
 }

 toggleShow = () => {
   this.setState(state => ({ isShow: !state.isShow }));
 };

 render() {
   const greeting = 'Welcome to React';

   return (
     <div>
       {this.state.isShow ? <Greeting greeting={"greeting"} /> : null}
       <p>hi:{this.state.isShow + ""}</p>
      <Button onClick={this.toggleShow}/><br/><br/>
     </div>
   );
 }
}
/*
class Button extends Component {
 constructor(props) {
   super(props);

   this.state = {
     isShow: true,
   };
 }

 toggleShow = () => {
   this.setState(state => ({ isShow: !state.isShow }));
 };

 render() {
   return (
     <button onClick={this.toggleShow} type="button">
       Toggle Show
     </button>
   );
 }
}
*/
const Button = ({ onClick }) => (
<button onClick={onClick} type="button">
  Toggle Show
</button>
);

const Greeting = ({ greeting }) => <h1>{greeting}</h1>;

export default LearningExample;


//calling function inside code :
<button onClick = {()=>  this.changeValue(0, 2)}
